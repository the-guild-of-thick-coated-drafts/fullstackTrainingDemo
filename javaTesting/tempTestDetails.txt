package com.hexaware.ftp22.model;

import com.hexaware.ftp22.persistence.EmployeeDAO;
import com.hexaware.ftp22.persistence.LeaveDetailsDAO;


import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNull;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import mockit.Expectations;
import mockit.MockUp;
import mockit.Mocked;
import mockit.Mock;
import mockit.integration.junit4.JMockit;

import java.util.ArrayList;
import java.util.List;

/**
 * Test class for Employee.
 */
@RunWith(JMockit.class)
public class EmployeeTest {

  /**
   * setup method.
   */
  @Before
  public void initInput() {

  }

  /**
   * Tests the equals/hashcode methods of the employee class.
   * @throws ParseException if any issues.
   */
  @Test
  public final void testEmployee() throws ParseException {
    Employee e100 = new Employee(100);
    Employee e101 = new Employee(101);
    assertNotEquals(e100, null);
    assertNotEquals(e100, new Integer(100));
    assertEquals(e100, new Employee(100));
    assertNotEquals(e101, new Employee(100));
    assertEquals(e100.hashCode(), new Employee(100).hashCode());
    assertEquals(e100.getEmpId(), new Employee(100).getEmpId());
    e101.setEmpId(100);
    assertEquals(e101, new Employee(100));
    Employee emp = new Employee();
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    String doj6 = "22-01-2018";
    Date d = sdf.parse(doj6);
    Employee e1 = new Employee(3000, "Arjun", "ArjunS@hexaware.com", 9445194242L, d, "admin", 2001, 0);
    assertEquals(e1, new Employee(3000, "Arjun", "ArjunS@hexaware.com", 9445194242L, d, "admin", 2001, 0));
    String doj1 = "22-01-2018";
    Date d9 = sdf.parse(doj1);
    Employee instance = new Employee();
    instance.setEmpDoj(d9);
    assertEquals(instance.getEmpDoj(), d9);
    System.out.println("setEmpId");
    final String empName = "Arjun";
    final int empId = 3000;
    final String empEmail = "ArjunS@hexaware.com";
    final long empMobile = 9445194242L;
    final String empDept = "admin";
    final int empMgrid = 2001;
    final int empLeaveavailable = 0;
    instance.setEmpId(empId);
    instance.setEmpName(empName);
    instance.setEmpEmail(empEmail);
    instance.setEmpMobile(empMobile);
    instance.setEmpDept(empDept);
    instance.setEmpMgrid(empMgrid);
    instance.setEmpLeaveavailable(empLeaveavailable);
    assertEquals(instance.getEmpId(), empId);
    assertEquals(instance.getEmpName(), empName);
    assertEquals(instance.getEmpEmail(), empEmail);
    assertEquals(instance.getEmpMobile(), empMobile);
    assertEquals(instance.getEmpDept(), empDept);
    assertEquals(instance.getEmpMgrid(), empMgrid);
    assertEquals(instance.getEmpLeaveavailable(), empLeaveavailable);
    String testtoString =
            ("empId" + instance.getEmpId() + "," + "empName" + instance.getEmpName() + ","
            + "empEmail" + instance.getEmpEmail() + ","
            + "empMobile" + instance.getEmpMobile() + "," + "empDoj" + d9 + "," + "empDept" + instance.getEmpDept()
            + "," + "empMgrid" + instance.getEmpMgrid() + ","
             + "empLeaveavailable" + instance.getEmpLeaveavailable());
    System.out.println("Done");
    assertEquals(testtoString, instance.toString());
  }

  /**
   * tests that empty employee list is handled correctly.
   * @param dao mocking the dao class
   */
  @Test
  public final void testListAllEmpty(@Mocked final EmployeeDAO dao) {
    new Expectations() {
      {
        dao.list(); result = new ArrayList<Employee>();
      }
    };
    new MockUp<Employee>() {
      @Mock
      EmployeeDAO dao() {
        return dao;
      }
    };
    Employee[] es = Employee.listAll();
    assertEquals(0, es.length);
  }

  /**
   * Tests that a list with some employees is handled correctly.
   * @param dao mocking the dao class
   */
  @Test
  public final void testListAllSome(@Mocked final EmployeeDAO dao) {
    new Expectations() {
      {
        ArrayList<Employee> es = new ArrayList<Employee>();
        es.add(new Employee(1));
        es.add(new Employee(10));
        es.add(new Employee(100));
        dao.list(); result = es;
      }
    };
    new MockUp<Employee>() {
      @Mock
      EmployeeDAO dao() {
        return dao;
      }
    };
    Employee[] es = Employee.listAll();
    assertEquals(3, es.length);
    assertEquals(new Employee(1), es[0]);
    assertEquals(new Employee(10), es[1]);
    assertEquals(new Employee(100), es[2]);
  }

    /**
   * Tests that a fetch of a specific employee works correctly.
   * @param dao mocking the dao class
   */
  @Test
  public final void testListById(@Mocked final EmployeeDAO dao) {
    final Employee e100 = new Employee(100);
    new Expectations() {
      {
        dao.find(100); result = e100;
        dao.find(-1); result = null;
      }
    };
    new MockUp<Employee>() {
      @Mock
      EmployeeDAO dao() {
        return dao;
      }
    };
    Employee e = Employee.listById(100);
    assertEquals(e100, e);

    e = Employee.listById(-1);
    assertNull(e);
  }
   /** tests that empty employee list is handled correctly.
   * @param dao mocking the dao class.
   * @throws ParseException if any issues.
   */
  @Test
  public final void testApplyLeave(@Mocked final EmployeeDAO dao)
   throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("dd-M-yyyy");
    String dateofjoin = "22-01-2018";
    final Date d1 = sdf.parse(dateofjoin);
    String startDate = "21-03-2018";
    final Date d2 = sdf.parse(startDate);
    String endDate = "22-03-2018";
    final Date d3 = sdf.parse(endDate);
    String applyDate = "09-03-2018";
    final Date d4 = sdf.parse(applyDate);

    final Employee emp = new Employee(3001, "Aishwarya", "AishwaryaH@hexaware.com", 8747843704L,
        d1, "HR", 3000, 9);
    new Expectations() {
      {
        dao.save(3001, 2, d2, d3, LeaveType.EL, "exam tension", LeaveStatus.APPROVED, d4, "default");
      }
    };
    new MockUp<Employee>() {
      @Mock
      EmployeeDAO dao() {
        return dao;
        }
    };
    assertEquals("leave applied", emp.leaveApplied(3001, d2, d3, "exam tension", d4, 2));
    assertNotEquals("days cannot be greater than leave available",
        emp.leaveApplied(3001, d2, d3, "exam tension", d4, 4));
  }
   /** tests that empty employee list is handled correctly.
   * @param dao mocking the dao class.
   * @throws ParseException if any issues.
   */
  @Test
    public final void testemployeeLeaveHistory(@Mocked final LeaveDetailsDAO dao)
    throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("dd-M-yyyy");
    String startDate3 = "06-03-2018";
    String endDate4 = "08-03-2018";
    String appon = "05-03-2018";
    Date d3 = sdf.parse(startDate3);
    Date d4 = sdf.parse(endDate4);
    Date d5 = sdf.parse(appon);
    // final LeaveDetails lev = new LeaveDetails(1000, 39, 3, d3, d4, LeaveType.EL, "Sick Leave", LeaveStatus.PENDING,
    //     d5, "Work");
    final List<LeaveDetails> leaveDetailslist = LeaveDetails.listById(1000);
    new Expectations() {
      {
        dao.listByEmpId1(1000);
        result = leaveDetailslist;
      }
    };
    new MockUp<LeaveDetails>() {
      @Mock
      LeaveDetailsDAO dao() {
        return dao;
        }
    };
    Employee lev1 = new Employee();
    assertEquals(leaveDetailslist, lev1.employeeLeaveHistory(1000));
    assertNotEquals(leaveDetailslist, lev1.employeeLeaveHistory(100000));
  }
  /**
* Tests that a fetch of a specific employee works correctly.
* @param dao mocking the dao class.
* @throws ParseException for handling the exception.
*/
  @Test
public final void testPendingLeave(@Mocked final LeaveDetailsDAO dao) throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    String sd = "06-03-2018";
    Date startDate = sdf.parse(sd);
    String ed = "08-03-2018";
    Date endDate = sdf.parse(ed);
    String lao = "05-03-2018";
    Date appliedOn = sdf.parse(lao);
    final List<LeaveDetails> leaveDetailsList1 = new ArrayList();
    leaveDetailsList1.add(new LeaveDetails(2001, 41, 3, startDate, endDate, LeaveType.EL, "Sick Leave",
         LeaveStatus.PENDING, appliedOn, "asdasdad"));
    new Expectations() {
          {
            dao.listByEmpId(2000);
            result = leaveDetailsList1;
      }
    };
    new MockUp<LeaveDetails>() {
      @Mock
      LeaveDetailsDAO dao() {
        return dao;
      }
    };
    Employee emp = new Employee();
    assertEquals(leaveDetailsList1, emp.pending(2000));
    assertNotEquals(leaveDetailsList1, emp.pending(40000));
    assertNotEquals(leaveDetailsList1, emp.pending(4000));
    assertNotEquals(leaveDetailsList1, emp.pending(1000));
  }
   /** Tests that a fetch of a specific employee works correctly.
   * @param dao mocking the dao class.
   * @throws ParseException if any issues.
   */
  @Test
  public final void testapprovedeny(@Mocked final LeaveDetailsDAO dao) throws ParseException {
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    String sd = "20-06-2018";
    Date sd1 = sdf.parse(sd);
    String ed = "25-06-2018";
    Date ed1 = sdf.parse(ed);
    String ad = "10-06-2018";
    Date ad1 = sdf.parse(ad);
    final LeaveDetails ld = new LeaveDetails(3000, 3, 5, sd1, ed1, LeaveType.EL,
        "Friend's Marraige", LeaveStatus.DENIED, ad1, "okie");
    new Expectations() {
      {
        dao.listByLeaveId(8);
        result = ld;
      }
    };
    new MockUp<LeaveDetails>() {
      @Mock
        LeaveDetailsDAO dao() {
        return dao;
      }
    };
    Employee ld1 = new Employee();
    LeaveDetails pendingLeave = LeaveDetails.listByLeaveId(8);
    assertNotEquals("approved", ld1.approvedeny("APPROVED", pendingLeave, "mgrComment"));
    assertNotEquals("pending", ld1.approvedeny("PENDING", pendingLeave, "mgrComment"));
    assertEquals("denied", ld1.approvedeny("DENIED", pendingLeave, "mgrComment"));
    assertEquals("successfully fetched", ld1.approvedeny("NOT DONE", pendingLeave, "mgrComment"));
  }
}
